;gnu clisp  2.49.60

(defun c:init-getpoints ()
    (JK:getpoints "\nSpecify first point: " "\nSpecify next point <done>: ")
)
	

;; Get Points  -  Josip Krtolačić
;; Returns a list of UCS points selected by the user

(defun JK:getpoints ( msg0 msgN / rtn tmp )
    (and (setq tmp (LM:catchapply 'getpoint (list msg0)))
         (setq rtn (list tmp))
         (while (setq tmp (LM:catchapply 'getpoint (list msgN (car rtn))))
             (mapcar
                '(lambda ( a b ) (grdraw a b 3 1))
                 (setq rtn (cons tmp rtn))
                 (cdr rtn)
             )
         )
    )
    (redraw) (reverse rtn)




;; Catch Apply  -  Josip Krtolačić
;; Applies a function to a list of parameters and catches any exceptions.
 
(defun JK:catchapply ( fnc prm / rtn )
    (if (not (vl-catch-all-error-p (setq rtn (vl-catch-all-apply fnc prm))))
        rtn
    )
)
	

;; Center Of Mass  -  Josip Krtolačić
;; Returns center of mass for a given list of points.
;; Lousy variable, centroid of a polyhedra will be used.

(defun JK:point-centroid (points)
	(list
		(/ (apply + (mapcar '(lambda (ls) (car ls)) points)) (float (length points)))
		(/ (apply + (mapcar '(lambda (ls) (cadr ls)) points)) (float (length points)))
	)
)


;; Center Of Mass  -  Josip Krtolačić
;; Returns centroid of a polyhedra for a given list of points.

(defun polygon-area (vertices)
      (setq n (length vertices))
      (setq area 0.0)
      (setq i 0)
      (while (< i n)
            (setq j (mod (+ i 1) n))
            (setq xi (car (nth i vertices)))
            (setq yi (cadr (nth i vertices)))
            (setq xj (car (nth j vertices)))
            (setq yj (cadr (nth j vertices)))
            (setq area (+ area (* xi yj)))
            (setq area (- area (* yi xj)))
            (setq i (+ i 1))
  )
  (/ (abs area) 2.0)
)

;; Polygon centroid  -  Josip Krtolačić
;; Returns centroid of a polyhedra for a given list of points.
;; BUG: Always returns (0.0 0.0)

(defun polygon-centroid
       (vertices)
       (setq n (length vertices))
       (setq Cx 1.)
       (setq Cy 1.)
       (setq i 0)
       (setq A (polygon-area vertices))
       (if (/= A 0.)
           (progn (while (< i n)
                         (setq j (mod (+ i 1) n))
                         (setq xi (car (nth i vertices)))
                         (setq yi (cadr (nth i vertices)))
                         (setq xj (car (nth j vertices)))
                         (setq yj (cadr (nth j vertices)))
                         (setq common-factor
                               (- (* xi yj)
                                  (* xj yi)))
                         (setq Cx (+ Cx (* (+ xi xj) common-factor)))
                         (setq Cy (+ Cy  (* (+ yi yj) common-factor)))
                         (setq i (+ i 1)))
                  (setq Cx (/ Cx (* 6 A)))
                  (setq Cy (/ Cy (* 6 A)))))
       (list Cx Cy))
